{"version":3,"sources":["app/components/MapComponent.js","app/App.js","app/services/countryService.js","reportWebVitals.js","index.js"],"names":["MapComponent","onCountryChange","geography","geographies","map","geo","onClick","NAME","properties","onMouseLeave","style","default","fill","outline","hover","pressed","rsmKey","App","useState","search","setSearch","country","setCountry","useEffect","name","replaceAll","fetch","then","response","json","result","message","catch","error","console","log","countries","className","e","capital","src","flag","alt","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA2CeA,EAvCM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACtB,OACE,cAAC,gBAAD,UACA,cAAC,gBAAD,UACE,cAAC,cAAD,CAAaC,UANJ,yGAMT,SACG,qBAAGC,YACUC,KAAI,SAAAC,GAAG,OACjB,cAAC,YAAD,CAEEH,UAAWG,EACXC,QAAS,WAAO,IACNC,EAASF,EAAIG,WAAbD,KACRN,EAAgBM,IAElBE,aAAc,aAEdC,MAAO,CACLC,QAAS,CACPC,KAAM,UACNC,QAAS,QAEXC,MAAO,CACLF,KAAM,OACNC,QAAS,QAEXE,QAAS,CACPH,KAAM,OACNC,QAAS,UAnBRR,EAAIW,mBCmCRC,EA1CH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEcF,mBAAS,MAFvB,mBAETG,EAFS,KAEAC,EAFA,KAqBhB,OAbAC,qBAAU,WCXe,IAACC,EDYrBL,EAAOM,WAAW,IAAK,KCZFD,EDaVL,ECZPO,MAHC,yCAGWF,GACdG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACH,OAAOA,EAAOC,QAAU,GAAKD,KAEhCE,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,ODQ7BN,MAAK,SAACS,GACLd,EAAWc,EAAYA,EAAU,GAAK,SAI1Cd,EAAW,SAMX,sBAAKe,UAAW,iBAAhB,UACE,qBAAKA,UAAW,MAAhB,SACE,cAAC,EAAD,CAAcpC,gBApBM,SAACqC,GACzBlB,EAAUkB,QAqBR,qBAAKD,UAAW,UAAhB,SAEKhB,EACC,gCACE,mCAAY,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASG,MAAO,OAAhB,OAAwBH,QAAxB,IAAwBA,OAAxB,EAAwBA,EAASkB,SAAtC,OACA,qBAAKC,IAAG,OAAEnB,QAAF,IAAEA,OAAF,EAAEA,EAASoB,KAAMC,IAAK,OAAQC,MAAO,aAG9C,WE3BAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b923ee84.chunk.js","sourcesContent":["import React from 'react'\r\nimport {ComposableMap, Geographies, Geography, ZoomableGroup} from \"react-simple-maps\";\r\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst MapComponent = ({ onCountryChange }) => {\r\n  return (\r\n    <ComposableMap>\r\n    <ZoomableGroup>\r\n      <Geographies geography={geoUrl}>\r\n        {({ geographies }) =>\r\n          geographies.map(geo => (\r\n            <Geography\r\n              key={geo.rsmKey}\r\n              geography={geo}\r\n              onClick={() => {\r\n                const { NAME } = geo.properties;\r\n                onCountryChange(NAME)\r\n              }}\r\n              onMouseLeave={() => {\r\n              }}\r\n              style={{\r\n                default: {\r\n                  fill: \"#D6D6DA\",\r\n                  outline: \"none\"\r\n                },\r\n                hover: {\r\n                  fill: \"#F53\",\r\n                  outline: \"none\"\r\n                },\r\n                pressed: {\r\n                  fill: \"#E42\",\r\n                  outline: \"none\"\r\n                }\r\n              }}\r\n            />\r\n          ))\r\n        }\r\n      </Geographies>\r\n    </ZoomableGroup>\r\n  </ComposableMap>\r\n  );\r\n}\r\n\r\nexport default MapComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport './App.css';\r\nimport {getContries} from \"./services/countryService\";\r\nimport MapComponent from \"./components/MapComponent\";\r\n\r\nconst App = () => {\r\n  const [search, setSearch] = useState('');\r\n  const [country, setCountry] = useState(null);\r\n\r\n  const handlerChangeSearch = (e) => {\r\n      setSearch(e);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(search.replaceAll(' ', '')) {\r\n      getContries(search)\r\n        .then((countries) => {\r\n          setCountry(countries ? countries[0] : null);\r\n        });\r\n    }\r\n    else {\r\n      setCountry(null);\r\n    }\r\n  });\r\n\r\n\r\n  return (\r\n      <div className={'grid-container'}>\r\n        <div className={'map'}>\r\n          <MapComponent onCountryChange={handlerChangeSearch}/>\r\n        </div>\r\n        <div className={'country'}>\r\n          {\r\n             country ?\r\n              <div>\r\n                <p> {country?.name + ' - ' + country?.capital} </p>\r\n                <img src={country?.flag} alt={'flag'} width={'250px'} />\r\n              </div>\r\n               :\r\n               null\r\n          }\r\n\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const url = \"https://restcountries.eu/rest/v2/name/\";\r\n\r\nexport const getContries = (name) => {\r\n    return fetch(url + name)\r\n        .then((response) => response.json() )\r\n        .then((result) => {\r\n            return result.message ? [] : result;\r\n        })\r\n        .catch((error) => console.log(error));\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}